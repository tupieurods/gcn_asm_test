/* Disassembling 'test_shuffle.bin' */
.amdcl2
.gpu GFX900
.64bit
.arch_minor 0
.arch_stepping 0
.driver_version 223600
.compile_options "-cl-std=CL2.0 -D__AMD__=1 -D__gfx900__=1 -D__gfx900=1 -D__IMAGE_SUPPORT__=1 -DFP_FAST_FMAF=1 -DFP_FAST_FMA=1 -DCL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE=3820172032 -cl-denorms-are-zero -m64 -Dcl_khr_fp64=1 -Dcl_amd_fp64=1 -Dcl_khr_global_int32_base_atomics=1 -Dcl_khr_global_int32_extended_atomics=1 -Dcl_khr_local_int32_base_atomics=1 -Dcl_khr_local_int32_extended_atomics=1 -Dcl_khr_int64_base_atomics=1 -Dcl_khr_int64_extended_atomics=1 -Dcl_khr_3d_image_writes=1 -Dcl_khr_byte_addressable_store=1 -Dcl_khr_fp16=1 -Dcl_khr_gl_sharing=1 -Dcl_khr_gl_depth_images=1 -Dcl_amd_device_attribute_query=1 -Dcl_amd_vec3=1 -Dcl_amd_printf=1 -Dcl_amd_media_ops=1 -Dcl_amd_media_ops2=1 -Dcl_amd_popcnt=1 -Dcl_khr_d3d10_sharing=1 -Dcl_khr_d3d11_sharing=1 -Dcl_khr_dx9_media_sharing=1 -Dcl_khr_image2d_from_buffer=1 -Dcl_khr_subgroups=1 -Dcl_khr_gl_event=1 -Dcl_khr_depth_images=1 -Dcl_khr_mipmap_image=1 -Dcl_khr_mipmap_image_writes=1 -Dcl_amd_liquid_flash=1 -Dcl_amd_copy_buffer_p2p=1 -Dcl_amd_planar_yuv=1 "
.acl_version "AMD-COMP-LIB-v0.8 (0.0.SC_BUILD_NUMBER)"
.globaldata
.gdata:
    .byte 0x35, 0x20, 0x00, 0x29, 0x0d, 0x2a, 0x19, 0x02 # ShuffleIndexes1 uchar array in __constant section
    .byte 0x17, 0x15, 0x18, 0x3f, 0x26, 0x2e, 0x34, 0x1f
    .byte 0x2c, 0x33, 0x2b, 0x30, 0x01, 0x1c, 0x27, 0x0f
    .byte 0x37, 0x25, 0x24, 0x16, 0x3c, 0x06, 0x3e, 0x14
    .byte 0x28, 0x11, 0x3b, 0x0a, 0x31, 0x03, 0x13, 0x07
    .byte 0x36, 0x04, 0x0e, 0x22, 0x23, 0x21, 0x0b, 0x3d
    .byte 0x3a, 0x2d, 0x09, 0x1a, 0x12, 0x32, 0x10, 0x1e
    .byte 0x1b, 0x08, 0x0c, 0x39, 0x05, 0x1d, 0x2f, 0x38
.kernel testKernel
    .config
        .dims x
        .cws 64, 1, 1
        .sgprsnum 13 # decompiled with CLRX 0.1.9, so default policy is not 200 and scalars regs for VCC, FLAT_SCRATCH and XNACK_MASK are excluded from this number
        .vgprsnum 9
        .floatmode 0xc0
        .pgmrsrc1 0x00ac0042
        .pgmrsrc2 0x00000090 # 0x90 is 0b10010000. CLRX doc says that "The register 1-5 bits of PGM_RSRC2 indicates how many first scalar registers hold user data". Which in our case is equal to 01000 = 8. s[0:7] - user data
        /*
          According to https://clrx.nativeboinc.org/wiki2/wiki/wiki/GcnState "Scalar registers layout" section, since we have 13 sgprs
          s[0:7] - User data registers
          s8 - Group id, since we have ony 1 dimension being enabled
          s9 - TGSIZE??? But it is probably not set, since bit 10 in .pgmrsrc2 is zero
          s10 - Scratch wave offset??? But it is probably not set, since bit zero in .pgmrsrc2 is zero
          s[13:14] - FLAT_SCRATCH
          s[15:16] - XNACK_MASK
          s[17:18] - VCC
        */
        .dx10clamp
        .ieeemode
        .useargs # if useargs enabled, then 6 user data registers will be used. 4-5 user data are argument's pointer.
        .priority 0
        .arg _.global_offset_0, "size_t", long                      # offset 0
        .arg _.global_offset_1, "size_t", long                      # offset 8
        .arg _.global_offset_2, "size_t", long                      # offset 16
        .arg _.printf_buffer, "size_t", void*, global, , rdonly     # offset 24
        .arg _.vqueue_pointer, "size_t", long                       # offset 32
        .arg _.aqlwrap_pointer, "size_t", long                      # offset 40
        .arg A, "uint*", uint*, global, , rdonly                    # offset 48
        .arg B, "uint*", uint*, global,                             # offset 56
    .text
/*000000000000: c0060002 00000000*/ s_load_dwordx2  s[0:1], s[4:5], 0x0             # get_global_offset(0) ?
/*000000000008: c00a0102 00000030*/ s_load_dwordx4  s[4:7], s[4:5], 0x30            # get pointer to A(s[4:5]) and to B(S[6:7])
/*000000000010: d1fd0001 04010c08*/ v_lshl_add_u32  v1, s8, 6, v0                   # v1 = (s8 << 6) + v0 = groupId * 64 + local_id(0). global_id(0) ?
/*000000000018: bf8cc07f         */ s_waitcnt       lgkmcnt(0)                      # wait for s_load_dwordxN operations to be finished
/*00000000001c: 680a0200         */ v_add_u32       v5, s0, v1                      # v5 = s0 + v1
/*000000000020: be8100ff 55555555*/ s_mov_b32       s1, .gdata>>32                  # high bytes of ShuffleIndexes1 address
/*000000000028: be8000ff 55555555*/ s_mov_b32       s0, .gdata&0xffffffff           # low bytes of ShuffleIndexes1 address
/*000000000030: 32040000         */ v_add_co_u32    v2, vcc, s0, v0                 # v2 = s0 + v0. low bytes of ShuffleIndexes1 address with desired offset. No shifts or muls applied to v0, because type of ShuffleIndexes1 is uchar and doesn't require that
/*000000000034: 7e060201         */ v_mov_b32       v3, s1                          # v3 = s1
/*000000000038: d11c6a03 01a90103*/ v_addc_co_u32   v3, vcc, v3, 0, vcc             # v3 = v3 + 0 + vcc. Compute high byters of ShuffleIndexes1 address with desired offset. Including carry bit from low bytes sum operation
/*000000000040: 7e080280         */ v_mov_b32       v4, 0                           # v4 = 0
/*000000000044: d2910004 0002089e*/ v_ashrrev_i64   v[4:5], 30, v[4:5]              # v[4:5] = v[4:5] >> 30. Would be used later for vaddr computations for aBuffer and bBuffer
/*00000000004c: 320e0804         */ v_add_co_u32    v7, vcc, s4, v4                 # v7 = s4 + v4. low bytes of aBuffer address + ofsset
/*000000000050: 7e0c0205         */ v_mov_b32       v6, s5                          # v6 = s5
/*000000000054: 38100b06         */ v_addc_co_u32   v8, vcc, v6, v5, vcc            # v8 = v6 + v5 + vcc. high bytes of aBuffer address + offset + carry flag from low bytes
/*000000000058: dc408000 027f0002*/ global_load_ubyte v2, v[2:3], off               # load ubyte to v2 from addr v[2:3]; opencl eq of ShuffleIndexes1[localId]
/*000000000060: dc508000 017f0007*/ global_load_dword v1, v[7:8], off               # load dword from aBuffer. v1 = value from v[7:8]. opencl eq temp = A[idx];
/*00000000006c: bf8c0f71         */ s_waitcnt       vmcnt(1)                        # wait for global_load_ubyte to be finished
/*000000000070: 24040482         */ v_lshlrev_b32   v2, 2, v2                       # v2 = v2 < 2. ShuffleIndexes1[localId] * 4. Computing target offest in LDS
/*000000000074: bf8c0f70         */ s_waitcnt       vmcnt(0)                        # wait for global_load_dword to be finished
                                    ds_bpermute_b32 v0, v2, v1                      # move value from v1 to v0 of different lane, where laneid is based on v2, which is determined by ShuffleIndexes1 array
/*00000000008c: 32020806         */ v_add_co_u32    v3, vcc, s6, v4                 # v1 = s6 + v4. bBuffer pointer low bytes + offset for output
/*000000000090: 7e040207         */ v_mov_b32       v4, s7                          # v2 = s7. bBuffer pointer high bytes
/*000000000094: 38040b02         */ v_addc_co_u32   v4, vcc, v4, v5, vcc            # v2 = v2 + v5 + vcc. bBuffer pointer high bytes + offset for output + carry bit from low bytes sum
/*000000000098: bf8cc07f         */ s_waitcnt       lgkmcnt(0)                      # wait for ds_bpermute_b32 to be finished
/*00000000009c: dc708000 007f0001*/ global_store_dword v[3:4], v0, off              # save v0 by v[1:2] address in global memory
/*0000000000a4: bf810000         */ s_endpgm
